"  AUTOGROUPS {{{
" =============================================================================

augroup configgroup
  autocmd!
  autocmd BufEnter Rakefile set filetype=ruby
  autocmd BufEnter Vagrantfile set filetype=ruby
  autocmd BufEnter Gemfile set filetype=ruby
augroup end

" }}}
" COLORS {{{

" color reset
if exists("syntax_on")
  syntax reset
endif

" Enable syntax highlighting
syntax enable
" syntax
syntax on
" support 256 colors in Lion terminal
set t_Co=256
set encoding=utf-8

if has('gui_running')
    set background=light
else
    set background=dark
endif

"Set colorscheme to Solarized
"let g:solarized_termtrans=1
"colorscheme solarized

"Set colorscheme to Molokai
"colorscheme molokai

"}}}
" PLUGIN OPTIONS {{{
"
"vim-airline options
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_theme='molokai'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
"let g:airline_left_sep=''
"let g:airline_right_sep=''
"let g:airline_section_z=''

"vim-powerline options
let g:Powerline_symbols = 'fancy'
let g:Powerline_dividers_override = [[0xe0b0], [0xe0b1], [0xe0b2], [0xe0b3]]
let g:Powerline_symbols_override = {
  \ 'BRANCH': [0xe238],
  \ 'RO'    : [0xe0a2],
  \ 'FT'    : [0xe1f6],
  \ 'LINE'  : [0xe0a1],
\ }

" CtrlP settings
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" Syntastic settings (Currently using Asynchronous Lint Engine)
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0
" let g:syntastic_puppet_puppet_args = 'parser validate --storeconfigs'

" vim-markdown settings
let g:markdown_include_jekyll_support = 0

" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" }}}
" {{{ SPACES & TABS
"
set tabstop=2
set expandtab
set shiftwidth=2
set softtabstop=2

" Auto indent
set autoindent
set smartindent

" Tell VIM to honor two-spaces after a period
set cpo+=J

" }}}
" UI CONFIG {{{

"  Highlight current line
set cursorline

" Disable mouse
set mouse=
if has('mouse')
  set mouse=a
endif

" Increase History
set history=1000

" Give context to where the cursor is positioned in a file
set scrolloff=14

" Visual autocomplete for command menu
set wildmenu

" Redraw only when we ned to
set lazyredraw

" highlight matching brackets
set showmatch

" Highlight column 140
if exists('+colorcolumn')
    set colorcolumn=140
else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>140v.\+', -1)
endif

" Hide buffers after they are abandoned
set hidden

" Highlight Trailing Whitespace
highlight ExtraWhitespace ctermbg=darkblue guibg=darkblue
match ExtraWhitespace /\s\+$/

" Auto Complete Menu
set completeopt=longest,menu

" }}}
" SEARCHING {{{

" Enable highlight search and highlight when searching
set hlsearch
set incsearch

" Ignore case when searching
set ignorecase
set smartcase

" Turn off search highlight with <leader><space>
nnoremap <leader><space> :nohlsearch<CR>

" }}}
" FOLDING {{{

" enable folding
set foldenable

" Open up to 10 folds by default
set foldlevelstart=10

" Max nested folds
set foldnestmax=10

" space opens/closes folds
nnoremap <space> za

"}}}
" MOVEMENT {{{

" Set to allow you to backspace while back past insert mode
set backspace=2

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" highlight last inserted text
nnoremap gV `[v`]

" Open file and goto previous location
autocmd BufReadPost *  if line("'\"") > 1 && line("'\"") <= line("$")
    \|     exe "normal! g`\""
    \|  endif

" Remove trailing whitespace on save :w
autocmd BufWritePre * %s/\s\+$//e

" Disable arrows for movement, make them resize instead
" nmap <Left> :vertical resize -5<CR>
" nmap <Up> :resize -5<CR>
" nmap <Right> :vertical resize +5<CR>
" nmap <Down> :resize +5<CR>
" imap <Left> <Esc><Esc>a
" imap <Up> <Esc><Esc>a
" imap <Right> <Esc><Esc>a
" imap <Down> <Esc><Esc>a

" }}}
" SHORTCUTS {{{

" Clear whitespace at end of line with '_$'
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" Quote words and lines with \q', \q", \qd
:nnoremap <Leader>q" ciw""<Esc>P
:nnoremap <Leader>q' ciw''<Esc>P
:nnoremap <Leader>qd daW"=substitute(@@,"'\\\|\"","","g")<CR>P

" }}}
" BACKUPS & HISTORY {{{

" Disable files that don't need to be created
set noswapfile
set nobackup
set nowritebackup

" Persistent Undo
if v:version >= 703
    set undofile
    set undodir=~/.vim/tmp,~/.tmp,~/tmp,~/var/tmp,/tmp
endif

" }}}
" FUNCTIONS {{{

" toggle between number, nonumber and relativenumber
function! ToggleNumber()
  if(&relativenumber == 1)
    set norelativenumber
    set number number?
  elseif (&number == 1)
    set nonumber nonumber?
  else
    set relativenumber relativenumber?
  endif
endfunction

" toggle between paste, and nopaste
function! TogglePaste()
  if(&paste == 1)
    set nopaste nopaste?
  else
    set paste paste?
  endif
endfunction

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" }}}
" VARIOUS REMAPS {{{

" Spelling / Typos
:command! WQ wq
:command! Wq wq
:command! W w
:command! Q q

" Switch buffers with Tab & Shift-Tab
:nnoremap <Tab> :bnext<CR>
:nnoremap <S-Tab> :bprevious<CR>

" Enable line numbers \+n
nmap <silent> <Leader>n :call ToggleNumber()<CR>

" Enable paste \+p
nmap <silent> <Leader>p :call TogglePaste()<CR>

" }}}

set modelines=1
" vim:foldmethod=marker:foldlevel=0
